// Test definitions. Do NOT edit this file!

#include <tuple>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch_amalgamated.hpp"

#include "../ProfesorTC.hpp" // implementations
#include "../ProfesorHoras.hpp"

// =====================
// tests for exercise 1
// ---------------------

TEST_CASE("Ex1", "[Probando constructores default ProfesorTC]")
{
    ProfesorTC ptc;
    SECTION("Constructor default ProfesorTC")  
    {
        REQUIRE(ptc.getNumNomina() == 0);
        REQUIRE(ptc.getSueldoBase() == 200);
        REQUIRE(ptc.getIncentivo() == 2);
    }
}

TEST_CASE("Ex2", "[Probando constructores default ProfesorHoras]")
{
    ProfesorHoras ph;
    SECTION("Constructor Default ProfesorHoras")  
    {
        REQUIRE(ph.getNumNomina() == 0);
        REQUIRE(ph.getSueldoBase() == 200.0);
        REQUIRE(ph.getHoras() == 1);
    }
}

TEST_CASE("Ex3", "[Probando constructores con parametros ProfesorTC]")
{
    ProfesorTC ptc(101, 18000.40, 25);
    SECTION("Constructor parámetros profesorTC")  
    {
        REQUIRE(ptc.getNumNomina() == 101);
        REQUIRE(ptc.getSueldoBase() == 18000.40);
        REQUIRE(ptc.getIncentivo() == 25);
    }
}
TEST_CASE("Ex4", "[Probando constructores con parametros ProfesorHora]")
{
    ProfesorHoras ph(102, 234.6, 40);
    SECTION("Constructor parametros prisma") 
    {
        REQUIRE(ph.getNumNomina() == 102);
        REQUIRE(ph.getSueldoBase() == 234.6);
        REQUIRE(ph.getHoras() == 40);
    }
}

TEST_CASE("Ex5", "[Probando polimorfismo en tiempo de ejecución]")
{
    Profesor* p1 = new ProfesorHoras(103, 423.5, 25);
    Profesor* p2 = new ProfesorTC(105, 23200.5, 4);
    SECTION("Polimorfismo de calcula sueldo final")  
    {
        REQUIRE(p1->calculaSueldoFinal() == 10587.5);
        REQUIRE(p2->calculaSueldoFinal() ==  24128.52);

    }
}

TEST_CASE("Ex6", "[Probando operador ==]")
{
    Profesor* p1 = new ProfesorTC(10, 15000.2, 5);
    Profesor* p2 = new ProfesorHoras(11, 643.75, 40);
    ProfesorTC ptc(15, 25000, 3);
    ProfesorHoras ph(5, 223.5, 24);
    SECTION("Operador == para clindro")  
    {
        REQUIRE(*p2 == ptc);
        REQUIRE(!(*p1 == ph));
        REQUIRE(!(*p1 == *p2));
        REQUIRE(!(ptc == ph));
    }
}